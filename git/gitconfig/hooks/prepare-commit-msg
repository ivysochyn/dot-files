#!/usr/bin/env bash

# Check if a rebase is in progress
REBASE_IN_PROGRESS=false
if [ -d ".git/rebase-merge" ] || [ -d ".git/rebase-apply" ]; then
  REBASE_IN_PROGRESS=true
fi

# Execute pre-commit-bin in the same directory as this script
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Execute pre-commit-bin in the same directory as this script
# with the prepare-commit-msg argument and pass all args
. "$SCRIPT_PATH/pre-commit-bin" "prepare-commit-msg $@"
COMMIT_MESSAGE_FILE="$1"

# If 'sign-off' doesn't exist, append one and then warn the user.
AUTHOR="$(git var GIT_AUTHOR_IDENT | sed 's/^\(.*>\).*$/\1/')"
COMMITTER="$(git var GIT_COMMITTER_IDENT | sed 's/^\(.*>\).*$/\1/')"

# Only append Signed-off-by if the author and committer are the same
if [ "$AUTHOR" == "$COMMITTER" ] && [ "$REBASE_IN_PROGRESS" == false ]; then
    if ! grep -qs "^Signed-off-by: " "$COMMIT_MESSAGE_FILE"; then
      SIGNOFF=$(echo "$AUTHOR" | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
      echo -e "\n\n$SIGNOFF" >> "$COMMIT_MESSAGE_FILE"
      echo -e "\033[33mWARN\033[0m: Appended the following signoff to the end of the commit message:\n  $SIGNOFF"
    fi
elif [ "$AUTHOR" != "$COMMITTER" ]; then
    echo -e "\033[33mWARN\033[0m: Author and committer are different. Skipping signoff."
    echo -e "      Author: $AUTHOR"
    echo -e "      Committer: $COMMITTER"
else
    echo -e "\033[33mWARN\033[0m: Rebase in progress. Skipping signoff."
fi
