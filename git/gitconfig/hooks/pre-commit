#!/usr/bin/env bash

function check_empty_commit() {
    # If there are no files staged, exit without doing anything
    # This prevents the pre-commit hook from running on an empty commit.

    if git rev-parse --verify HEAD >/dev/null 2>&1
    then
      against=HEAD
    else
      # Initial commit: diff against an empty tree object
      against=$(git hash-object -t tree /dev/null)
    fi

    if git diff-index --cached --quiet --diff-filter=ACMRTUXB "$against" --
    then
      exit 0
    fi
    return 0
}

function check_forbidden_words() {
    # Check whether committed files contain 'NOCOMMIT' keyword
    # If so, abort the commit and display a colorful error message.

    if git commit -v --dry-run | grep 'NOCOMMIT' >/dev/null 2>&1
    then
      # We found a NOCOMMIT, so abort the commit and display a colorful error message.
      echo -e "\n\033[1;31mERROR:\033[0m You have a \033[1;31mNOCOMMIT\033[0m in your commit message."
      echo -e "       Please remove it before committing.\n"

      MSG=$(git commit -v --dry-run | grep 'NOCOMMIT' | sed 's/^//')

      # Remove color codes from the message and colorize the NOCOMMIT keyword.
      MSG=$(echo -e "$MSG" | sed 's/\x1B\[[0-9;]*[JKmsu]//g' | sed 's/NOCOMMIT/\x1B[1;31m&\x1B[0m/g')

      # Display file names and line numbers.
      FILES=$(git commit -v --dry-run | grep '\--git a/[a-zA-Z0-9]' | sed 's/^.*--git a\///' | sed 's/ b\/.*$//' | uniq)
      echo -e "\033[1;31mFiles and lines containing NOCOMMIT:\033[0m\n"

      count=1
      while IFS= read -r file; do
        # Grep for NOCOMMIT in the file
        if ! grep 'NOCOMMIT' "$file" >/dev/null 2>&1
        then
          continue
        fi
        # Display the file name and line numbers containing NOCOMMIT
        echo -e "  $count. \033[1;33m$file\033[0m"
        grep -n 'NOCOMMIT' "$file" | sed 's/^\([0-9]*\):/\1: /' | sed 's/  */ /g' | sed 's/^/        /' | sed 's/NOCOMMIT/\x1B[1;31m&\x1B[0m/g'
        count=$((count+1))

      done <<< "$FILES"

      return 1
    else
      return 0
    fi
}

function main()
{
    # If empty commit, exit without doing anything
    check_empty_commit

    # Check for forbidden words
    check_forbidden_words
    if [ $? -ne 0 ]
    then
        exit 1
    fi

    # Execute pre-commit-bin in the same directory as this script
    SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
    . "$SCRIPT_PATH/pre-commit-bin" pre-commit
    if [ $? -ne 0 ]
    then
        exit 1
    fi

    return 0
}

main
